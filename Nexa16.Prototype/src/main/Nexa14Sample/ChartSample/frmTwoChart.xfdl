<?xml version="1.0" encoding="utf-8"?>
<FDL version="1.5">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="frmTwoChart" classname="frmTwoChart" left="0" top="0" width="1024" height="768" titletext="Two Chart Form" onload="frmTwoChart_onload" onbeforeclose="frmTwoChart_onbeforeclose">
    <Layouts>
      <Layout>
        <WebBrowser id="chart1" left="1.56%" top="1.56%" width="47.46%" height="11.85%" taborder="0"/>
        <WebBrowser id="chart2" left="50.78%" top="1.69%" width="47.66%" height="11.85%" taborder="1"/>
        <Button id="Button00" taborder="2" text="Save As Image" onclick="Button00_onclick" left="33.79%" top="94.53%" width="14.65%" height="3.39%"/>
        <Button id="Button01" taborder="3" text="Save As Image" onclick="Button01_onclick" left="83.79%" top="94.53%" width="14.65%" height="3.39%"/>
        <WebBroswer id="chart00" left="1.56%" top="16.02%" width="47.46%" height="11.85%" taborder="4"/>
        <WebBroswer id="chart03" left="50.78%" top="16.15%" width="47.66%" height="11.85%" taborder="5"/>
        <WebBroswer id="chart04" left="1.56%" top="30.47%" width="47.46%" height="11.85%" taborder="6"/>
        <WebBroswer id="chart05" left="50.78%" top="30.6%" width="47.66%" height="11.85%" taborder="7"/>
        <WebBroswer id="chart06" left="1.56%" top="44.92%" width="47.46%" height="11.85%" taborder="8"/>
        <WebBroswer id="chart07" left="50.78%" top="45.05%" width="47.66%" height="11.85%" taborder="9"/>
        <WebBroswer id="chart08" left="1.56%" top="59.38%" width="47.46%" height="11.85%" taborder="10"/>
        <WebBroswer id="chart09" left="50.78%" top="59.51%" width="47.66%" height="11.85%" taborder="11"/>
        <WebBroswer id="chart10" left="1.56%" top="73.83%" width="47.46%" height="11.85%" taborder="12"/>
        <WebBroswer id="chart11" left="50.78%" top="73.96%" width="47.66%" height="11.85%" taborder="13"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.0"><![CDATA[//include "LIB::rMateChartH5.xjs";
//include "LIB::rMateChartH5License.xjs";

/*
 * rMate Chart for HTML5 nexacro 샘플 소스
 *
 * rMateChartH5 version : 3.0
 * nexacro version : 14
 *
 * nexacro과 rMateChart for HTML5 간에 데이타를 주고 받는 모듈을 포함하여
 * rMateChartH5의 기능을 구현한 예제입니다.
 * 
 * rMateChart for HTML5 는 HTML5 표준과 자바스크립트로 구현된 차트 제품으로
 * nexacro의 Runtime 모드에서는 Plugin 상태에서 실행되고
 * HTML5 모드에서는 브라우져의 iframe내에서 실행되게 됩니다.
 * 이를 위해 차트 개발시 nexacro의 WebBrowser 컴포넌트(onusernotify가 지원되는 버젼)로 작성되어야 하며
 * rMateChartH5 Kit for nexacro을 통해 Runtime과 HTML5를 동시에 지원할 수 있게 됩니다.
 * 이때 WebBrowser 컴포넌트내에 넣어질 html을 필요하게 되며 이에 대한 예제는 Kit에서
 * nexacroChartH5Sample.html로 제공되고 있습니다.
 * 
 * Runtime모드로 실행될 때는 아래의 함수를 사용하는 기능은 nexacro과의 연동이 안되어
 * html내어서 별도의 동명의 자바스크립트 함수로 구현되어야 하며, 이때 함수내에서
 * nexacro내의 기능과 연동하여 사용할 수는 없습니다. (HTML5모드에서는 가능)
 *    labelJsFunction
 *    dataTipJsFunction
 *    fillJsFunction
 *    insideLabelJsFunction
 *    outsideLabelJsFunction
 *    totalLabelJsFunction
 *    tickLabelJsFunction
 *    innerTipJsFunction
 *    targetTipJsFunction
 *    seriesLabelFunc
 * 
 * - 주의사항
 *  HTML5 모드로 실행하는 경우 nexacroChartH5Sample.html은 iframe내에서 실행되므로 동일한 서버에서 불려져야
 *  브라우져의 보안정책에 위배되지 않게 됩니다. 다른 서버에서 불려질 경우 제대로 작동하지 문제가 발생하니
 *  유의하시기 바랍니다.
 */

/*
 * 한개의 Form에 여러개의 차트를 넣어 처리하는 예제입니다.
 * rMateChartOnLoad 함수에서 생성되는 차트의 id로 구분하여 생성을 해주게 됩니다.
 */



this.makeChartVars = function() {
	var chartVars = "";

	//rMateChartH5가 로딩 완료 되었을 때 호출 할 함수를 정의 하십시오.
	var rMateOnLoadCallFunction = "rMateChartOnLoad";
	chartVars += "rMateOnLoadCallFunction="+rMateOnLoadCallFunction;

	return chartVars;
}

// chartVars에 rMateOnLoadCallFunction 으로 아래 함수를 설정하여 rMateChartH5가 로딩된후 불려지게 할 수 있습니다.
this.rMateChartOnLoad = function(id) {
	if (id == "chart1") 
	{
		this.rMateChartSetLayout(this.chart1, layoutStr);
		this.rMateChartSetData(this.chart1, chartData);
	} 
	else if (id == "chart2") 
	{
		this.rMateChartSetLayout(this.chart2, layoutStr2);
		this.rMateChartSetData(this.chart2, chartData);
	}
	else if (id == "chart00")
	{
		this.rMateChartSetLayout(this.chart00, layoutStr);
		this.rMateChartSetData(this.chart00, chartData);
	}
	else if (id == "chart03")
	{
		this.rMateChartSetLayout(this.chart03, layoutStr2);
		this.rMateChartSetData(this.chart03, chartData);
	}
	else if (id == "chart04")
	{
		this.rMateChartSetLayout(this.chart04, layoutStr);
		this.rMateChartSetData(this.chart04, chartData);
	}
	else if (id == "chart05")
	{
		this.rMateChartSetLayout(this.chart05, layoutStr2);
		this.rMateChartSetData(this.chart05, chartData);
	}
	else if (id == "chart06")
	{
		this.rMateChartSetLayout(this.chart06, layoutStr);
		this.rMateChartSetData(this.chart06, chartData);
	}
	else if (id == "chart07")
	{
		this.rMateChartSetLayout(this.chart07, layoutStr2);
		this.rMateChartSetData(this.chart07, chartData);
	}
	else if (id == "chart08")
	{
		this.rMateChartSetLayout(this.chart08, layoutStr);
		this.rMateChartSetData(this.chart08, chartData);
	}
	else if (id == "chart09")
	{
		this.rMateChartSetLayout(this.chart09, layoutStr2);
		this.rMateChartSetData(this.chart09, chartData);
	}
	else if (id == "chart10")
	{
		this.rMateChartSetLayout(this.chart10, layoutStr);
		this.rMateChartSetData(this.chart10, chartData);
	}
	else if (id == "chart11")
	{
		this.rMateChartSetLayout(this.chart11, layoutStr2);
		this.rMateChartSetData(this.chart11, chartData);
	}
}

this.frmTwoChart_onload = function(obj:Form, e:nexacro.LoadEventInfo) {
	//var htmlUrl = "http://localhost:8080/nexacro/chart/Samples/nexacroChartH5Sample.html";		// 차트를 그릴 html의 url
	//var scriptRootUrl = "http://localhost:8080/nexacro/chart/rMateChartH5";			// rMateChartH5의 assets과 js가 저장된 url (이 디렉토리의 아래에 JS/ 와 Assets/ 디렉토리가 있어야 함)

	var chartVars = this.makeChartVars();
	

	// Form이 완선된 후 차트를 생성합니다.
	this.rMateChartCreate(this.chart1, this.scriptRootUrl, this.htmlUrl, chartVars);
	this.rMateChartCreate(this.chart2, this.scriptRootUrl, this.htmlUrl, chartVars);
	
	this.rMateChartCreate(this.chart00, this.scriptRootUrl, this.htmlUrl, chartVars);
	this.rMateChartCreate(this.chart03, this.scriptRootUrl, this.htmlUrl, chartVars);
	
	this.rMateChartCreate(this.chart04, this.scriptRootUrl, this.htmlUrl, chartVars);
	this.rMateChartCreate(this.chart05, this.scriptRootUrl, this.htmlUrl, chartVars);
	
	this.rMateChartCreate(this.chart06, this.scriptRootUrl, this.htmlUrl, chartVars);
	this.rMateChartCreate(this.chart07, this.scriptRootUrl, this.htmlUrl, chartVars);
	
	this.rMateChartCreate(this.chart08, this.scriptRootUrl, this.htmlUrl, chartVars);
	this.rMateChartCreate(this.chart09, this.scriptRootUrl, this.htmlUrl, chartVars);
	
	this.rMateChartCreate(this.chart10, this.scriptRootUrl, this.htmlUrl, chartVars);
	this.rMateChartCreate(this.chart11, this.scriptRootUrl, this.htmlUrl, chartVars);
}

this.frmTwoChart_onbeforeclose = function(obj:Form, e:nexacro.CloseEventInfo) {
	this.rMateChartClear(this.chart1);
	this.rMateChartClear(this.chart2);
	
	this.rMateChartClear(this.chart00);
	this.rMateChartClear(this.chart03);
	
	this.rMateChartClear(this.chart04);
	this.rMateChartClear(this.chart05);

	this.rMateChartClear(this.chart06);
	this.rMateChartClear(this.chart07);
	
	this.rMateChartClear(this.chart08);
	this.rMateChartClear(this.chart09);
	
	this.rMateChartClear(this.chart10);
	this.rMateChartClear(this.chart11);

}

this.Button00_onclick = function(obj:Button,  e:nexacro.ClickEventInfo) {
	this.rMateChartSaveAsImage(this.chart1);
}

this.Button01_onclick = function(obj:Button,  e:nexacro.ClickEventInfo) {
	this.rMateChartSaveAsImage(this.chart2);
}

var layoutStr = '\
<rMateChart backgroundColor="0xFFFFFF" borderStyle="solid" cornerRadius="5">\
	<Options>\
		<Caption text="Annual Report"/>\
	</Options>\
	<Column3DChart showDataTips="true" dataTipJsFunction="dataTipFunc">\
		/* dataTipJsFunction : Column3DChart 시리즈에 마우스 오버될 때 실행되는 Javascript함수로 \
			html파일과 Form 내에 정의한 Javascript함수로 데이터를 보낸 후 Javascript 에서 반환되는 값을 Tooltip에 보여줍니다. */ \
		<horizontalAxis>\
			<CategoryAxis categoryField="Month" displayName="날짜"/>\
		</horizontalAxis>\
		<verticalAxis>\
			<LinearAxis displayName="금액"/>\
		</verticalAxis>\
		<series>\
			<Column3DSeries id="series1" yField="Profit" displayName="Profit">\
				<showDataEffect>\
					<SeriesInterpolate/>\
				</showDataEffect>\
			</Column3DSeries>\
			<Column3DSeries id="series2" yField="Cost" displayName="Cost">\
				<showDataEffect>\
					<SeriesInterpolate/>\
				</showDataEffect>\
			</Column3DSeries>\
			<Column3DSeries id="series3" yField="Revenue" displayName="Revenue">\
				<showDataEffect>\
					<SeriesInterpolate/>\
				</showDataEffect>\
			</Column3DSeries>\
		</series>\
	</Column3DChart>\
</rMateChart>\
';

var layoutStr2 = '\
<rMateChart backgroundColor="0xFFFFFF" cornerRadius="12" borderStyle="solid">\
	<Options>\
		<Caption text="Annual Report"/>\
	</Options>\
	<Pie2DChart showDataTips="true">\
		<series>\
			<Pie2DSeries field="Profit" nameField="Month" displayName="Profit" labelPosition="inside" labelJsFunction="pieSeriesLabelFunc">\
			/* \
				labelJsFunction : Pie2DSeries에서 라벨 표시용 Javascript함수로 \
					실행시 html파일 또는 Form내에 정의한 해당 함수로 데이터와 함께 불려집니다\
					이 예제에서는 전달받은 데이터의 Month 필드명과 수치뒤에 %를 붙여 반환하도록 구현되었읍니다\
			*/ \
				<showDataEffect>\
					<SeriesInterpolate/>\
				</showDataEffect>\
			</Pie2DSeries>\
		</series>\
	</Pie2DChart>\
</rMateChart>\
';

// 차트 데이터
var chartData = [{"Month":"Jan","Profit":1000,"Cost":1500,"Revenue":2300},
				{"Month":"Feb","Profit":1400,"Cost":1400,"Revenue":1200},
				{"Month":"Mar","Profit":1500,"Cost":1200,"Revenue":1600},
				{"Month":"Apr","Profit":1900,"Cost":1300,"Revenue":1300},
				{"Month":"May","Profit":1400,"Cost":900,"Revenue":1000},
				{"Month":"Jun","Profit":2000,"Cost":1000,"Revenue":1200}];

				
///////////////// 아래의 예제 함수들은 rMateChartH5와 연동하여 불려지는 함수들이며 위에 정의한 htmlUrl 의 html 내에도 정의되어야 합니다. - 함수의 사용에 관련된 자세한 내용은 rMateChart for HTML5를 참조하시기 바랍니다.  //////////////////////


/*
// ------------------------- 데이터팁 사용자 정의 함수 -----------------------------------------------------
// 챠트에서 showDataTips="true" 설정 후 마우스 오버 시 보이는 데이터팁 정의
// layout XML 에서 Chart 속성을 넣을때 dataTipJsFunction를 주고, 만든 javascript 함수명을 넣어줍니다
// 예) <Column3DChart showDataTips="true" dataTipJsFunction를="dataTipFunc">
//
// 파라메터 설명
// seriesId : layout XML에서 부여한 series의 id가 있을 경우, 해당 id를 보내줍니다.
// seriesName : 시리즈의 displayName 으로 정의한 시리즈 이름을 보내줍니다.
// xName : X 축에 displayName 을 정의하였다면 X축의 displayName을 보내줍니다.
// yName : Y 축에 displayName 을 정의하였다면 Y축의 displayName을 보내줍니다.
// data : 해당 item의 값을 표현하기 위해 입력된 data(row값에 해당 - data로 입력된 종류에 따라 XML문자열 또는 배열의 Object가 됩니다)
// values : 해당 item의 값 (배열로 전달되며, 챠트 종류에 따라 아래와 같이 들어옵니다.)
            BarSeries     0:x축값 1:y축값
            ColumnSeries  0:x축값 1:y축값
            AreaSeries    0:x축값 1:y축값
            BubbleSeries  0:x축값 1:y축값 2:radius값
            LineSeries    0:x축값 1:y축값
            HLOCSeries    0:x축값 1:open값 2:low값 3:high값 4:close값
            PieSeries     0:값 1:퍼센트값 2:nameFiled명
*/
this.dataTipFunc = function(seriesId, seriesName, index, xName, yName, data, values) {
//trace("dataTipFunc seriesId:"+seriesId+" seriesName:"+seriesName+" index:"+index+" xName:"+xName+" yName:"+yName+" values:"+values+" data:"+data);
	var str = "<table border='1' borderColor='#cc7722' cellpadding='0' cellspacing='0'>";
	str += "<tr>";
	str += "<td align='center'>이미지</td><td align='cneter'><img src='http://www.riamore.net/image/leftlogo.gif'></td>";
	str += "</tr>";
	str += "<tr>";
	str += "<td align='center'>" + "series ID" + "</td><td align='center'>" + seriesId + "</td>";
	str += "</tr>";
	str += "<tr>";
	str += "<td align='center'>" + "displayName" + "</td><td align='center'>" + seriesName + "</td>";
	str += "</tr>";
	str += "<tr>";
	str += "<td align='center'>" + "item Index" + "</td><td align='center'>" + index + "</td>";
	str += "</tr>";
	str += "<tr>";
	str += "<td align='center'>" + "X축 이름" + "</td><td align='center'>" + xName + "</td>";
	str += "</tr>";
	str += "<tr>";
	str += "<td align='center'>" + "Y축 이름" + "</td><td align='center'>" + yName + "</td>";
	str += "</tr>";
	str += "<tr>";
	str += "<td align='center'>" + "X축 값" + "</td><td align='center'>" + values[0] + "</td>";
	str += "</tr>";
	str += "<tr>";
	str += "<td align='center'>" + "Y축 값" + "</td><td align='center'>" + values[1] + "</td>";
	str += "</tr>";
	str += "<tr>";
	str += "<td align='center'>" + "합 계" + "</td><td align='center'>" + getSum(data) + "</td>";
	str += "</tr>";
	str += "</table>";
	return str;
}

/*
// ------------------------- 폴라계열 수치 필드 사용자 정의 함수 -----------------------------------------------------
// 칼럼, 파이, 바 챠트에서 labelPosition 속성을 설정한 경우 수치 필드를 사용자 정의하는 함수입니다.
// layout XML 에서 Series 속성을 넣을때 labelJsFunction 주고, 만든 javascript 함수명을 넣어줍니다
//
// 예) <Pie2DSeries field="Profit" nameField="Month" labelPosition="inside" labelJsFunction="pieSeriesLabelFunc">
//
// 파라메터 설명
// seriesId : 해당 시리즈의 아이디.
// index : 해당 아이템의 인덱스.
// data : 해당 item의 값을 표현하기 위해 입력된 data(row값에 해당 - data로 입력된 종류에 따라 XML문자열 또는 배열의 Object가 됩니다)
// values : 해당 item의 값 (배열로 전달되며, 챠트 종류에 따라 아래와 같이 들어옵니다.)
            PieSeries     0:값 1:퍼센트값
//
// 참고 : 수치필드 사용자 정의 시엔 <br>태그와 같은 html형식의 코딩 삽입이 불가능합니다.
*/
this.pieSeriesLabelFunc = function(seriesId, index, data, values) {
	return data["Month"]+", "+Number(values[1]).toFixed(2)+"%";
}
]]></Script>
  </Form>
</FDL>
