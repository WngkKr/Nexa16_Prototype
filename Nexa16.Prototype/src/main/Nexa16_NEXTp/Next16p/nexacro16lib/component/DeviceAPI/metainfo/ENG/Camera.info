<?xml version="1.0" encoding="UTF-8"?>
<MetaInfo version="2.0">
  <Object id="nexacro.Camera">
    <ObjectInfo inheritance="" classname="nexacro.Camera" shorttypename="" csstypename="Camera" csscontrolname="" group="Object" subgroup="Object" csspseudo="" container="false" composite="false" tabstop="false" cssstyle="false" contents="false" formats="false" contentseditor="" defaultwidth="" defaultheight="" registration="allow" edittype="" generatetype="" useinitvalue="false" popup="false" edittypecomponent="" dblclickevent="" requirement="Mobile Hybrid (Android),Mobile Hybrid (IOS)" description="It gets an image or an image path taken by a connected camera of a mobile device." />
    <PropertyInfo>
      <Property name="encodingtype" group="" subgroup="" edittype="Enum" readonly="false" initonly="false" hidden="false" control="false" expr="false" bind="false" deprecated="false" unused="false" mandatory="false" objectinfo="" enuminfo="" unitinfo="" delimiter="" requirement="Mobile Hybrid (Android),Mobile Hybrid (IOS)" description="The encodingtype property designates encoding type of an image which shall be obtained through a camera application." csspropertyname="" csselementname="" normalpropertyname="encodingtype" />
      <Property name="gettype" group="" subgroup="" edittype="Enum" readonly="false" initonly="false" hidden="false" control="false" expr="false" bind="false" deprecated="false" unused="false" mandatory="false" objectinfo="" enuminfo="" unitinfo="" delimiter="" requirement="Mobile Hybrid (Android),Mobile Hybrid (IOS)" description="The gettype property designates whether to receive shot images as url or data." csspropertyname="" csselementname="" normalpropertyname="gettype" />
      <Property name="imageheight" group="" subgroup="" edittype="Number" readonly="false" initonly="false" hidden="false" control="false" expr="false" bind="false" deprecated="false" unused="false" mandatory="false" objectinfo="" enuminfo="" unitinfo="" delimiter="" requirement="Mobile Hybrid (Android),Mobile Hybrid (IOS)" description="The imageheight property designates height values of an image which shall be obtained through a camera application." csspropertyname="" csselementname="" normalpropertyname="imageheight" />
      <Property name="imagequality" group="" subgroup="" edittype="Number" readonly="false" initonly="false" hidden="false" control="false" expr="false" bind="false" deprecated="false" unused="false" mandatory="false" objectinfo="" enuminfo="" unitinfo="" delimiter="" requirement="Mobile Hybrid (Android),Mobile Hybrid (IOS)" description="The imagequality property designates quality values of an image which shall be obtained through a camera application." csspropertyname="" csselementname="" normalpropertyname="imagequality" />
      <Property name="imagewidth" group="" subgroup="" edittype="Number" readonly="false" initonly="false" hidden="false" control="false" expr="false" bind="false" deprecated="false" unused="false" mandatory="false" objectinfo="" enuminfo="" unitinfo="" delimiter="" requirement="Mobile Hybrid (Android),Mobile Hybrid (IOS)" description="The imagewidth property designates width values of an image which shall be obtained through a camera application." csspropertyname="" csselementname="" normalpropertyname="imagewidth" />
    </PropertyInfo>
    <StyleInfo>
      <PropertyInfo />
      <StatusInfo />
    </StyleInfo>
    <ControlInfo />
    <MethodInfo>
      <Method name="addEventHandler" group="" async="false" usecontextmenu="false" deprecated="false" unused="true" requirement="" description="It adds an event handler function.">
        <Syntax text="Camera.addEventHandler( strEventID, objFunc, objTarget )">
          <Return type="Integer" description="If successful, it returns the changed index, otherwise, it returns -1." />
          <Arguments>
            <Argument name="objFunc" type="Object" in="false" out="false" option="false" variable="false" description="Event handler function" />
            <Argument name="objTarget" type="Object" in="false" out="false" option="false" variable="false" description="Target scope" />
            <Argument name="strEventID" type="String" in="true" out="true" option="true" variable="true" description="Event ID" />
          </Arguments>
        </Syntax>
      </Method>
      <Method name="addEventHandlerLookup" group="" async="false" usecontextmenu="false" deprecated="false" unused="true" requirement="" description="It adds an event handler as a result searched with a designated event ID.">
        <Syntax text="Camera.addEventHandlerLookup( strEventID, strFunc, objTarget )">
          <Return type="Integer" description="If successful, it returns an added index value. Otherwise, it returns -1." />
          <Arguments>
            <Argument name="objTarget" type="Object" in="false" out="false" option="false" variable="false" description="target scope" />
            <Argument name="strEventID" type="String" in="false" out="false" option="false" variable="false" description="Event ID" />
            <Argument name="strFunc" type="String" in="false" out="false" option="false" variable="false" description="" />
          </Arguments>
        </Syntax>
      </Method>
      <Method name="clearEventHandler" group="" async="false" usecontextmenu="false" deprecated="false" unused="true" requirement="" description="It clears all set event handler functions.">
        <Syntax text="Camera.clearEventHandler( strEventID )">
          <Return type="Integer" description="It returns the number of deleted event handler functions." />
          <Arguments>
            <Argument name="strEventID" type="String" in="false" out="false" option="false" variable="false" description="Event ID" />
          </Arguments>
        </Syntax>
      </Method>
      <Method name="findEventHandler" group="" async="false" usecontextmenu="false" deprecated="false" unused="true" requirement="" description="It finds a designated event handler function and returns the index.">
        <Syntax text="Camera.findEventHandler( strEventID, objFunc, objTarget )">
          <Return type="Integer" description="Index of a designated function" />
          <Arguments>
            <Argument name="objFunc" type="Object" in="false" out="false" option="false" variable="false" description="Event handler function object to find" />
            <Argument name="objTarget" type="Object" in="false" out="false" option="false" variable="false" description="Target scope" />
            <Argument name="strEventID" type="String" in="false" out="false" option="false" variable="false" description="Event ID" />
          </Arguments>
        </Syntax>
      </Method>
      <Method name="getEventHandler" group="" async="false" usecontextmenu="false" deprecated="false" unused="true" requirement="" description="It is a method to return the specified event handler function.">
        <Syntax text="Camera.getEventHandler( strEventID, nIdx )">
          <Return type="Object" description="It returns the object of the event handler function. If the specified index location is not valid, it returns &quot;null.&quot;" />
          <Arguments>
            <Argument name="nIdx" type="Integer" in="false" out="false" option="false" variable="false" description="Index of the event handler function (Zero-based index)" />
            <Argument name="strEventID" type="String" in="false" out="false" option="false" variable="false" description="Event ID" />
          </Arguments>
        </Syntax>
      </Method>
      <Method name="removeEventHandler" group="" async="false" usecontextmenu="false" deprecated="false" unused="true" requirement="" description="It removes a designated index or an event handler function.">
        <Syntax text="Camera.removeEventHandler( strEventID, objFunc, objTarget )">
          <Return type="Integer" description="It returns the number of removed event handler functions(if successful, 1. if fails, 0)" />
          <Arguments>
            <Argument name="objFunc" type="Object" in="false" out="false" option="false" variable="false" description="event handler function item to remove" />
            <Argument name="objTarget" type="Object" in="false" out="false" option="false" variable="false" description="target scope" />
            <Argument name="strEventID" type="String" in="false" out="false" option="false" variable="false" description="event ID" />
          </Arguments>
        </Syntax>
      </Method>
      <Method name="removeEventHandlerLookup" group="" async="false" usecontextmenu="false" deprecated="false" unused="true" requirement="" description="It removes an event handler lookup with a designated event ID.">
        <Syntax text="Camera.removeEventHandlerLookup( strEventID, strFunc, objTarget )">
          <Return type="Integer" description="It returns the number of deleted event handler functions. (if is successful, 1. if it fails, 0)" />
          <Arguments>
            <Argument name="objTarget" type="Object" in="false" out="false" option="false" variable="false" description="Target scope" />
            <Argument name="strEventID" type="String" in="false" out="false" option="false" variable="false" description="Event ID" />
            <Argument name="strFunc" type="String" in="false" out="false" option="false" variable="false" description="" />
          </Arguments>
        </Syntax>
      </Method>
      <Method name="setEventHandler" group="" async="false" usecontextmenu="false" deprecated="false" unused="true" requirement="" description="It changes an event handler function.">
        <Syntax text="Camera.setEventHandler( strEventID, objFunc, objTarget )">
          <Return type="Integer" description="If it is success, it returns the changed index. Otherwise, it returns -1." />
          <Arguments>
            <Argument name="objFunc" type="Object" in="false" out="false" option="false" variable="false" description="Event handler function" />
            <Argument name="objTarget" type="Object" in="false" out="false" option="false" variable="false" description="target scope" />
            <Argument name="strEventID" type="String" in="false" out="false" option="false" variable="false" description="Event ID" />
          </Arguments>
        </Syntax>
      </Method>
      <Method name="setEventHandlerLookup" group="" async="false" usecontextmenu="false" deprecated="false" unused="true" requirement="" description="It sets an event handler lookup with a designated event ID.">
        <Syntax text="Camera.setEventHandlerLookup( strEventID, strFunc, objTarget )">
          <Return type="Integer" description="If successful, it returns the changed index, otherwise, it returns -1." />
          <Arguments>
            <Argument name="objTarget" type="Object" in="false" out="false" option="false" variable="false" description="target scope" />
            <Argument name="strEventID" type="String" in="false" out="false" option="false" variable="false" description="Event ID" />
            <Argument name="strFunc" type="Object" in="false" out="false" option="false" variable="false" description="Event handler function" />
          </Arguments>
        </Syntax>
      </Method>
      <Method name="takePicture" group="" async="false" usecontextmenu="false" deprecated="false" unused="false" requirement="Mobile Hybrid (Android),Mobile Hybrid (IOS)" description="The takePicture method obtains an image by operating designated basic camera application in mobile device.">
        <Syntax text="Camera.takePicture()">
          <Return type="" description="" />
          <Arguments />
        </Syntax>
      </Method>
    </MethodInfo>
    <EventHandlerInfo>
      <EventHandler name="oncapture" group="" deprecated="false" unused="false" requirement="Mobile Hybrid (Android),Mobile Hybrid (IOS)" description="The oncapture Event occurs when an image is successfully obtained by successful interconnection of camera application of mobile device.">
        <Syntax text="Camera.oncapture(obj:nexacro.Camera,e:nexacro.CameraEventInfo);">
          <Return type="" description="" />
          <Arguments>
            <Argument name="e" type="CameraEventInfo" in="false" out="false" option="false" variable="false" description="" />
          </Arguments>
        </Syntax>
      </EventHandler>
      <EventHandler name="onerror" group="" deprecated="false" unused="false" requirement="Mobile Hybrid (Android),Mobile Hybrid (IOS)" description="The onerror Event occurs when interconnection of camera application of mobile device is failed.">
        <Syntax text="Camera.onerror(obj:nexacro.Camera,e:nexacro.CameraErrorEventInfo);">
          <Return type="" description="" />
          <Arguments>
            <Argument name="e" type="CameraErrorEventInfo" in="false" out="false" option="false" variable="false" description="" />
          </Arguments>
        </Syntax>
      </EventHandler>
    </EventHandlerInfo>
    <ContentsInfo />
  </Object>
</MetaInfo>
